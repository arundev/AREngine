#include <stdio.h>
#include "win32.h"
#include "engine.h"
#include "mesh/mesh.h"

#include <windows.h>
#include <mmsystem.h>

#include <assimp/postprocess.h>
#include <assimp/scene.h>
#include <assimp/version.h>
#include <assimp/config.h>
#include <assimp/cimport.h>
#include <assimp/cexport.h>

#include "../../include/assimp/postprocess.h"
#include "../../include/assimp/scene.h"
#include <assimp/Importer.hpp>
#include <BaseImporter.h>

Mesh* g_test_trangle = NULL;


static unsigned char InputData_abRawBlock[1310] = {
	77, 77, 30, 5, 0, 0, 2, 0, 10, 0, 0, 0, 3, 0, 0, 0, 61, 61, 91, 3, 0, 0, 62, 61, 10, 0, 0, 0, 3, 0, 0, 0,
	0, 1, 10, 0, 0, 0, 0, 0, 128, 63, 0, 64, 254, 2, 0, 0, 66, 111, 120, 48, 49, 0, 0, 65, 242, 2, 0, 0, 16, 65, 64, 1,
	0, 0, 26, 0, 102, 74, 198, 193, 102, 74, 198, 193, 0, 0, 0, 0, 205, 121, 55, 66, 102, 74, 198, 193, 0, 0, 0, 0, 102, 74, 198, 193,
	138, 157, 184, 65, 0, 0, 0, 0, 205, 121, 55, 66, 138, 157, 184, 65, 0, 0, 0, 0, 102, 74, 198, 193, 102, 74, 198, 193, 90, 252, 26, 66,
	205, 121, 55, 66, 102, 74, 198, 193, 90, 252, 26, 66, 102, 74, 198, 193, 138, 157, 184, 65, 90, 252, 26, 66, 205, 121, 55, 66, 138, 157, 184, 65,
	90, 252, 26, 66, 102, 74, 198, 193, 102, 74, 198, 193, 0, 0, 0, 0, 205, 121, 55, 66, 102, 74, 198, 193, 0, 0, 0, 0, 205, 121, 55, 66,
	102, 74, 198, 193, 90, 252, 26, 66, 205, 121, 55, 66, 102, 74, 198, 193, 90, 252, 26, 66, 102, 74, 198, 193, 102, 74, 198, 193, 90, 252, 26, 66,
	102, 74, 198, 193, 102, 74, 198, 193, 0, 0, 0, 0, 205, 121, 55, 66, 138, 157, 184, 65, 0, 0, 0, 0, 205, 121, 55, 66, 102, 74, 198, 193,
	90, 252, 26, 66, 205, 121, 55, 66, 138, 157, 184, 65, 0, 0, 0, 0, 102, 74, 198, 193, 138, 157, 184, 65, 0, 0, 0, 0, 102, 74, 198, 193,
	138, 157, 184, 65, 90, 252, 26, 66, 102, 74, 198, 193, 138, 157, 184, 65, 90, 252, 26, 66, 205, 121, 55, 66, 138, 157, 184, 65, 90, 252, 26, 66,
	205, 121, 55, 66, 138, 157, 184, 65, 0, 0, 0, 0, 102, 74, 198, 193, 138, 157, 184, 65, 0, 0, 0, 0, 102, 74, 198, 193, 102, 74, 198, 193,
	90, 252, 26, 66, 102, 74, 198, 193, 102, 74, 198, 193, 90, 252, 26, 66, 102, 74, 198, 193, 138, 157, 184, 65, 0, 0, 0, 0, 64, 65, 216, 0,
	0, 0, 26, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0,
	0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63,
	0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63,
	0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63,
	0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63,
	0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 96, 65, 54, 0, 0, 0, 0, 0, 128, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 53, 169,
	40, 65, 176, 205, 90, 191, 0, 0, 0, 0, 32, 65, 158, 0, 0, 0, 12, 0, 0, 0, 2, 0, 3, 0, 6, 0, 3, 0, 1, 0, 0, 0,
	6, 0, 4, 0, 5, 0, 7, 0, 6, 0, 7, 0, 6, 0, 4, 0, 6, 0, 8, 0, 9, 0, 10, 0, 6, 0, 11, 0, 12, 0, 13, 0,
	6, 0, 1, 0, 14, 0, 7, 0, 6, 0, 7, 0, 15, 0, 1, 0, 6, 0, 16, 0, 17, 0, 18, 0, 6, 0, 19, 0, 20, 0, 21, 0,
	6, 0, 22, 0, 0, 0, 23, 0, 6, 0, 24, 0, 6, 0, 25, 0, 6, 0, 80, 65, 54, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0,
	4, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0,
	64, 0, 0, 0, 64, 0, 0, 0, 0, 64, 67, 0, 0, 0, 67, 97, 109, 101, 114, 97, 48, 49, 0, 0, 71, 52, 0, 0, 0, 189, 19, 25,
	195, 136, 104, 81, 64, 147, 56, 182, 65, 96, 233, 20, 194, 67, 196, 97, 190, 147, 56, 182, 65, 0, 0, 0, 0, 85, 85, 85, 66, 32, 71, 14,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 68, 0, 176, 179, 1, 0, 0, 10, 176, 21, 0, 0, 0, 5, 0, 77, 65, 88, 83, 67, 69, 78,
	69, 0, 44, 1, 0, 0, 8, 176, 14, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 9, 176, 10, 0, 0, 0, 128, 2, 0, 0, 2, 176,
	168, 0, 0, 0, 48, 176, 8, 0, 0, 0, 0, 0, 16, 176, 18, 0, 0, 0, 66, 111, 120, 48, 49, 0, 0, 64, 0, 0, 255, 255, 19, 176,
	18, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 32, 176, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 169, 40, 65, 176, 205, 90, 191, 0, 0, 0, 0, 33, 176, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 176, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0,
	128, 63, 0, 0, 128, 63, 3, 176, 143, 0, 0, 0, 48, 176, 8, 0, 0, 0, 1, 0, 16, 176, 21, 0, 0, 0, 67, 97, 109, 101, 114, 97,
	48, 49, 0, 0, 64, 0, 0, 255, 255, 32, 176, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 19, 25, 195, 136, 104, 81, 64, 147, 56, 182, 65, 35, 176, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 66, 36, 176, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 13, 90, 189, 120, 0, 0, 0, 0, 0, 99, 156, 154, 194, 4, 176, 73, 0, 0, 0, 48, 176, 8, 0, 0,
	0, 2, 0, 16, 176, 21, 0, 0, 0, 67, 97, 109, 101, 114, 97, 48, 49, 0, 0, 64, 0, 0, 255, 255, 32, 176, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 233, 20, 194, 67, 196, 97, 190, 147, 56, 182, 65,
};

#define AIUT_DEF_ERROR_TEXT "sorry, this is a test"
static const aiImporterDesc desc = {
	"UNIT TEST - IMPORTER",
	"",
	"",
	"",
	0,
	0,
	0,
	0,
	0,
	"apple mac linux windows"
};
#define InputData_BLOCK_SIZE 1310

int main(int argc, char *argv[]){
	CreateWnd(800, 600, "hello arun");
	AppInit();
	MsgLoop();
}

void AppInit(){
	g_engine = new Engine();
	Renderer::Window param;
	param.width_ = 800;
	param.height_ = 600;
	param.wnd_ = (int)g_wnd;
	param.instance_ = (int)g_instance;
	g_engine->Init(param);

	g_test_trangle = Mesh::CreateTriangle();

	//Assimp::DefaultLogger::create("assimp test");

	Assimp::Importer* pImp = new Assimp::Importer();
	const aiScene* sc = pImp->ReadFileFromMemory(InputData_abRawBlock, InputData_BLOCK_SIZE,
		aiProcessPreset_TargetRealtime_Quality, "3ds");

	int numMesh = sc->mNumMeshes;
	int numVertex = sc->mMeshes[0]->mNumVertices;
	int numFace = sc->mMeshes[0]->mNumFaces;

}

void AppUpdate(){
	g_engine->Update();
}

void AppRender(){
	g_engine->Render();
}

void AppFree(){
	SAFE_FREE(g_engine);
}