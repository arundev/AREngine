
cbuffer LightingBuffer
{
	float4 ambientLightColor;
	float ambientLightIntensity;
	float4 directionLightColor;
	float3 directionLightDir;
};

struct PSInput
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float2 texCoord : TEXCOORD0;
};

Texture2D baseMap : register(t0);
SamplerState samplerData : register(s0);

float4 Main(PSInput input) : SV_TARGET
{
	float4 output;
	
	float4 diffuse = baseMap.Sample(samplerData, input.texCoord);

	// lighting:ambient
	if(ambientLightIntensity > 0.0f)
	{
		output = diffuse * (ambientLightColor * ambientLightIntensity);
	}
	
	// lighting:direction
	float4 lightDir = -directionLightColor;
	float lightInten = saturate(dot(input.normal, lightDir.xyz));
	if(lightInten > 0.0f)
	{
		float4 directionLighting = saturate(directionLightColor * lightInten);
		output *= directionLighting;	
	}

	return output;
}